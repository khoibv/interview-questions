import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";

import fs from "fs";
import path from "path";
import matter from "gray-matter";
import { sortByDate } from "@/lib/date";
import { getFiles } from "@/lib/file";
import Question from "@/components/Question";

interface HomeProps {
  questions: Question[];
}
const Home: NextPage<HomeProps> = ({ questions }: HomeProps) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Interview questions</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="posts">
        {questions.map((question, index: number) => (
          <Question question={question} key={index} />
        ))}
      </div>
    </div>
  );
};

export async function getStaticProps() {
  const questionPath = path.join("data", "questions");

  // Get files from the dir
  const files = await getFiles(questionPath);

  const questions: Question[] = [];

  for await (const f of files) {
    // console.log(f, path.relative(questionPath, f));
    const slug = path.basename(f, ".md").replaceAll(path.sep, "-");

    const category = path
      .relative(questionPath, f)
      .replace(path.basename(f), "")
      .slice(0, -1);
    // Get frontmatter
    const markdownWithMeta = fs.readFileSync(f, "utf-8");

    const { data: frontmatter } = matter(markdownWithMeta);

    questions.push({
      category,
      slug,
      frontmatter: frontmatter as Frontmatter,
    });
  }

  return {
    props: {
      questions: questions
        .filter((it) => !!it.frontmatter.isPublished)
        .sort(sortByDate)
        .map((it) => {
          const question: Question = it;
          if (!it.frontmatter.seoTitle) {
            it.frontmatter.seoTitle = it.frontmatter.title;
          }

          if (!it.frontmatter.lastUpdatedDate) {
            it.frontmatter.lastUpdatedDate = it.frontmatter.publishedDate;
          }

          if (!it.frontmatter.layout) {
            it.frontmatter.layout = "common";
          }

          return question;
        }),
    },
  };
}

export default Home;
